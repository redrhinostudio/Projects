import java.util.Random; //Generate a random number
import java.util.Scanner; //Get input from keyboard


public class Hot_or_Cold {

	/* INFORMATION
	 * ***********
	 * Hot_or_Cold.java
	 * 
	 * [theredrhino]
	 * [July 23rd, 2017]
	 * [http://rrstudionews.wordpress.com] 
	 * 
	 * ********************************************
	 * This code was generated by Red Rhino Studio.
	 * ********************************************
	 * This java program uses simple boolean logic to play a
	 * simulated version of a classic guessing game. A
	 * random integer number is generated between 1 and 100,000.
	 * The user then enters guesses via the keyboard in an attempt
	 * to find the random number. Each valid guess entered is then rated by
	 * its numerical closeness to the random number. A hint word is then
	 * printed to the screen that reflects how near the new guess is
	 * to the random number. Guessing continues until the number
	 * is correctly guessed. In addition to the hint word, there is also
	 * a graphical aid for making guesses in the form of a number line.
	 * 
	 * 
	 * Hint Words and Ranges
	 * *********************
	 * Ice Cold:  (guess >= 22000)  Blazing Hot:  (guess <= 50)  
	 * Very Cold: (guess >= 7000)    Very Hot:     (guess <= 7000)
	 * Cold:      (guess >= 50)      Hot:          (guess <= 22000)
	 * Cool:      (rest of values)  Warm: 		  (rest of values)
	 * 
	 */
	
	//MAIN METHOD
	public static void main(String[] args) {
		
		//Variables and Objects
		Scanner in = new Scanner(System.in); //Get user input from keyboard
		Random rando = new Random(); //Generate the random secret number
		String userResponse; //Used in getting play again response
		int secretNum; //Secret number to find by guessing
		int guessNum = 1; //Variable to hold the guessed number
		int currentNum = 1; //Variable to hold the closest current number to the secret
		int numOfGuesses = 0; //Counter for number of guesses in a game
		int gameNum = 1; //Counter for the game number
		boolean start = true; //Use different error checking statements until reference is found
		boolean playing = true; //Controls main game loop
		boolean num_not_found = true; //Controls current game
		boolean no_start_number = true; //Used for getting first reference number
		
		System.out.println("Welcome to \"Hot or Cold\"!");
		System.out.println("***********************");
		System.out.println("Use the hints to guess the secret number between 1 and 100,000.");
		System.out.println("(Positive integer values only)");
		System.out.println("***********************\n");
		while(playing){
			System.out.println("Game " + gameNum + "\n");
			secretNum = (rando.nextInt(100000) + 1); //Generate a number between 1 and 100,000
			//UNCOMMENT THE NEXT LINE TO REVEAL SECRET NUMBER
			System.out.println("SECRET = " + secretNum);
			System.out.print("Enter starting number: ");
			
			while(num_not_found){
				if(no_start_number){
					currentNum = getGuessNumber(in, start); //Call method to get first reference number
					if(currentNum == secretNum){
						System.out.println("\n\nAMAZING!!! A supremely lucky guess!");
						System.out.println("You should play the lottery.\n\n");
						//Leave game and start again
						break;
					}
					no_start_number = false;
					start = false;
					System.out.print("Now enter your first guess: ");
				}
				guessNum = getGuessNumber(in, start); //For getting all the guesses
				//Call method to update reference number and get hint
				processGuess1(currentNum, guessNum, secretNum);
				currentNum = processGuess2(currentNum, guessNum, secretNum);
				numOfGuesses += 1; //Increment guess counter
				if(currentNum == secretNum)
					num_not_found = false;
				else
					System.out.print("Enter Guess: ");
			}//END {num_not_found}
			System.out.println("\n***************");
		    System.out.println("CONGRATULATIONS");
		    System.out.print("You found " + secretNum + " in " + numOfGuesses);
		    System.out.println(" guesses.");
			//Reset to get the first guess number again
		    start = true;
		    num_not_found = true;
			no_start_number = true;
			numOfGuesses = 0;
			gameNum += 1;
			//Prompt user for input to play a new game or not
			System.out.println("\nPLAY AGAIN?");
			System.out.println("[Yes(y) or No(n)]");
			userResponse = in.next();
			userResponse = userResponse.trim();
			while((userResponse.equalsIgnoreCase("y") == false) 
			      && (userResponse.equalsIgnoreCase("n") == false)){
				System.out.println("Invalid Input: [Yes(y) or No(n)]");
				userResponse = in.next();
				userResponse = userResponse.trim();
			}
			if(userResponse.equalsIgnoreCase("n")){
				System.out.println("\nThank you for playing \"Hot or Cold\"!");
				System.out.println("Good Bye.");
				playing = false;
			}
		}//END {playing}
		in.close(); //Close Scanner object
		return;
	}
	
	/**
	 * This method supports handling the input from the user. Only
	 * positive integers are allowed.
	 * 
	 * @param in - 'Main' Scanner object passed into method to continue user input
	 * @param start - If this is true then different statements will be displayed for input 
	 * @return The guessed integer value
	 */
	private static int getGuessNumber(Scanner in, boolean start){
	    String guessNumInput;
		int guessNum;
		if(start){
			while(true){
				guessNumInput = in.next();
				guessNumInput = guessNumInput.trim();
				try {
					guessNum = Integer.parseInt(guessNumInput);
				}
				catch(NumberFormatException input_error) {
					System.out.println("\nInvalid Input (Positive integer numbers only)");
					System.out.print("Enter starting number: ");
					continue;
				}
				if(guessNum <= 0){
					System.out.println("\nInvalid Input (Positive integer numbers only)");
					System.out.print("Enter starting number: ");
					continue;
				}
				break;
			}//END {true}
		}//END {starting guess}
		else{
			while(true){
				guessNumInput = in.next();
				guessNumInput = guessNumInput.trim();
				try {
					guessNum = Integer.parseInt(guessNumInput);
				}
				catch(NumberFormatException input_error) {
					System.out.println("\nInvalid Input (Positive integer numbers only)");
					System.out.print("Enter Guess: ");
					continue;
				}
				if(guessNum <= 0){
					System.out.println("\nInvalid Input (Positive integer numbers only)");
					System.out.print("Enter Guess: ");
					continue;
				}
				break;
			}//END {true}
		}//END {regular guess}

		return guessNum;
	}//END {method getGuessNumber}
	
	/**
	 * This method uses the previous closest number as well as the newly guessed
	 * number to ascertain the correct result code. The result code refers to
	 * the distance between the current reference number and the new guess. If the
	 * new guess is closer (hotter) than the current reference number then the
	 * current number is updated to the value of the guess.
	 * 
	 * @param current - The previous closest guess 
	 * @param guess - The newest guess to check for closeness
	 * @param secret - The secret number to be found
	 * @return The value of the current closest guess is now returned.
	 */
	private static void processGuess1(int current, int guess, int secret){
		//Done!
		if(guess==secret)
			return;
		
		System.out.println("********");
		int guessDiff = Math.abs((guess - secret));
		int currentDiff = Math.abs((current - secret));
		
		
		//If the guess is closer to the secret, update current to be guess
		if(guessDiff < currentDiff){
			if(guessDiff <= 50){
				System.out.println("Blazing Hot!");
			}
			else if(guessDiff <= 7000){
				System.out.println("Very Hot!");
			}
			else if(guessDiff <= 22000){
				System.out.println("Hot.");
			}
			else
				System.out.println("Warm.");
		}
		else if(guessDiff > currentDiff){
			if(guessDiff >= 22000){
				System.out.println("Ice Cold!");
			}
			else if(guessDiff >= 7000){
				System.out.println("Very Cold!");
			}
			else if(guessDiff >= 50){
				System.out.println("Cold.");
			}
			else
				System.out.println("Cool.");
		}
		else{
			System.out.println("Neither hotter nor colder...");
		}

		System.out.println("********");
	}//END {method processGuess}
	
	/**
	 * This method creates a visual aid for showing how close your guesses are
	 * getting to the secret number.
	 * 
	 * @param current - This is the current closest value to the secret number
	 * @param guess - This is the guess value which will be checked against the 
	 *                'current' variable
	 * @param secret - This is the secret number that will be used for guess checking
	 * @return The new closest guess is returned if applicable, if the guess is not closer
	 *         then the old closest value is returned.
	 */
	private static int processGuess2(int current, int guess, int secret){
		//Done!
		if(guess==secret)
			return guess;
		
		int newCurrent = current;
		int guessDiff = Math.abs(guess - secret);
		int currentDiff = Math.abs(current - secret);
		int coldScaleValue = 20;
		int hotScaleValue = 20;
		//DEBUG
		if(guessDiff < currentDiff){
			hotScaleValue = ((int)Math.sqrt(guessDiff));
			//DEBUG - Remove comments here to learn the scale value
			//System.out.println("hotScaleValue " + hotScaleValue);
		}
		else {
			coldScaleValue = ((int)Math.sqrt(guessDiff));
			//DEBUG - Remove comments here to learn the scale value
			//System.out.println("coldScaleValue " + coldScaleValue);
		}
		
		//HOT->^ = 20 AND ^->COLD = 20
		System.out.println("HOT                    ^                    COLD");
		System.out.print("  (");
		//Print scaled guess result '*'s and the '|' to show guess accuracy
		int scaleFactor = 20;
		if(guessDiff < currentDiff){
			newCurrent = guess;
			//Create a scaling system that generates an intuitive
			//number line that gives a visual aid to the guess perspective
			for(int i=1; i <= 316; i++){
				if(i == hotScaleValue){
					if(i<=7){
						scaleFactor = 1;
						break;
					}
					else if(i<=10){
						scaleFactor = 2;
						break;
					}
					else if(i<=13){
						scaleFactor = 3;
						break;
					}
					else if(i<=17){
						scaleFactor = 4;
						break;
					}
					else if(i<=21){
						scaleFactor = 5;
						break;
					}
					else if(i<=26){
						scaleFactor = 6;
						break;
					}
					else if(i<=36){
						scaleFactor = 7;
						break;
					}
					else if(i<=51){
						scaleFactor = 8;
						break;
					}
					else if(i<=75){
						scaleFactor = 9;
						break;
					}
					else if(i<=110){
						scaleFactor = 10;
						break;
					}
					else if(i<=130){
						scaleFactor = 11;
						break;
					}
					else if(i<=150){
						scaleFactor = 12;
						break;
					}
					else if(i<=180){
						scaleFactor = 13;
						break;
					}
					else if(i<=200){
						scaleFactor = 14;
						break;
					}
					else if(i<=227){
						scaleFactor = 15;
						break;
					}
					else if(i<=242){
						scaleFactor = 16;
						break;
					}
					else if(i<=275){
						scaleFactor = 17;
						break;
					}
					else if(i<=290){
						scaleFactor = 18;
						break;
					}
					else if(i<=305){
						scaleFactor = 19;
						break;
					}
					else{
						scaleFactor = 20;
						break;
					}
				}//END {hot scaleFactor assignment}
			}//END {for loop to find the right scaleFactor}
									
			//Fill in the number line accurately
			for(int i=1; i<=21; i++){
				if(i!=scaleFactor){
					System.out.print("-");
				}
				else{
					System.out.print("*");					
				}
			}//END {print hot scale}
			//Print the rest of the scale line
			System.out.print("-------------------");
		}//END {hotScaleFactoring and line printing}
		
		else if(guessDiff > currentDiff){
			//Print the beginning of the number line
			System.out.print("-------------------");
			
			for(int i=1; i <= 316; i++){
				if(i == coldScaleValue){
					if(i>305){
						scaleFactor = 20;
						break;
					}
					else if( i >= 305){
						scaleFactor = 19;
						break;
					}
					else if(i>=290){
						scaleFactor = 18;
						break;
					}
					else if(i>=275){
						scaleFactor = 17;
						break;
					}
					else if(i>=242){
						scaleFactor = 16;
						break;
					}
					else if(i>=227){
						scaleFactor = 15;
						break;
					}
					else if(i>=200){
						scaleFactor = 14;
						break;
					}
					else if(i>=180){
						scaleFactor = 13;
						break;
					}
					else if(i>=150){
						scaleFactor = 12;
						break;
					}
					else if(i>=130){
						scaleFactor = 11;
						break;
					}
					else if(i>=110){
						scaleFactor = 10;
						break;
					}
					else if(i>=75){
						scaleFactor = 9;
						break;
					}
					else if(i>=51){
						scaleFactor = 8;
						break;
					}
					else if(i>=36){
						scaleFactor = 7;
						break;
					}
					else if(i>=26){
						scaleFactor = 6;
						break;
					}
					else if(i>=21){
						scaleFactor = 5;
						break;
					}
					else if(i<=17){
						scaleFactor = 4;
						break;
					}
					else if(i>=13){
						scaleFactor = 3;
						break;
					}
					else if(i>=10){
						scaleFactor = 2;
						break;
					}
					else{
						scaleFactor = 1;
						break;
					}
				}//END {cold scaleFactor assignment}
			}//END {for loop to find the right scaleFactor}
			//Fill in the number line accurately			
			for(int i=1; i<=21; i++){
				if(i!=scaleFactor){
					System.out.print("-");
				}
				else{
					System.out.print("*");
				}
			}//END {print cold scale}
			
		}//END {coldScaleFactoring and line printing}
		else{
			//The guess did not change so print an even number line
			System.out.print("--------------------*--------------------");
		}
		System.out.println(")");
		System.out.println("********");

		//return the new current guess, it will stay the same if the guess is cold or even
		return newCurrent;
	}//END {method processGuess2}
	
}//END {class Hot_or_Cold}
